@startuml "Classes Diagram"

abstract class Connect4 {
  - game
  - gameView
  - players
  - playersView

  + init() : void
  - play() : void
}

class Connect4Console extends Connect4 {
  - game : Game
  - gameView : GameViewConsole
  - players : Players
  - playersView : PlayersViewConsole

  + init() : void
  - play() : void
}

class Game {
  + NUMBER_PLAYERS
  + COLORS
  - turn
  - board

  + reset() : void
  + getTurn() : number
  + getBoard() : Array
  + changeTurn() : void
  + isGameOver(column) : boolean
  + chooseColumn(player) : number
  + putToken(column, color) : void
}

class GameView {
  - boardView : BoardView
  + messages : Messages
  - playersView : PlayersView

  + playAgain() : boolean
  - isValidAnswer(answer) : boolean
  + showMessage(message) : void
  + showBoard(board) : void
  + choosePlayers(colors) : Array
}

class GameViewConsole  extends GameView {
  - boardView : BoardView
  - playersView : PlayersView
  - messages : Messages

  + playAgain() : boolean
  - isValidAnswer(answer) : boolean
  + showMessage(message) : void
  + showBoard(board) : void
  + choosePlayers(colors) : Array
}

class Board {
  + static NUMBER_ROWS = 6
  + static NUMBER_COLUMNS = 7
  + static DELIMITER = ' | '
  + static EMPTY = ' '
  + static NUMBER_WINNER_TOKENS = 4
  - board : Array
  - line : Array

  + reset() : void
  + getBoard() : Array
  + isConnect4(column) : boolean
  + chooseColumn(player) : number
  - isValidColumn(column) : boolean
  + isFullColumn(column) : boolean
  + isFullBoard() : boolean
  + putToken(column, color) : void
  + getRow(column) : number
}

abstract class BoardView {
  + console : Console

  + show(board) : void
}

class BoardViewConsole extends BoardView {
  + console : Console

  + show(board) : void
}

class Players {
  - players : Array

  + setPlayers(choosedPlayers) : Array
  + getPlayers() : Array
}
abstract class PlayersView {
  + choosePlayers(colors) : Array
  - isValidPlayerType(playersType) : boolean
}

class PlayersViewConsole extends PlayersView {
  + choosePlayers(colors) : Array
  - isValidPlayerType(playersType) : boolean
}

class HumanPlayer {
  + chooseColumn() : number
  - isValidColumn(column) : boolean
}
class MachinePlayer {
  + chooseColumn() : number
  - randomColumn() : number
}

class Line {
  - north
  - northWest
  - west
  - southWest
  + DIRECTIONS

  + getLine(coordenate, direction, board) : Array
  + isValidCoordenate(column, row) : boolean
  + shift(coordenate, direction) : Array
  + isWinner(line) : boolean
  + getOppositeDirection(direction) : Array
}

class Messages {
  - messages : JSON

  + get(message) : string
}

Connect4Console *--down-> Game
Connect4Console *--down-> Players
Connect4Console *--down-> PlayersViewConsole
Connect4Console *--down-> GameViewConsole

Game *-down-> Board

GameViewConsole *-down-> BoardViewConsole
GameView *-> Messages

Board *-down-> Line
Board .> Board

BoardViewConsole .left.> Board

Players -down-> HumanPlayer : 0..2
Players -down-> MachinePlayer : 0..2

@enduml